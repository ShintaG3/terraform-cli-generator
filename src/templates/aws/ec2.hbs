terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = "{{region}}"
}

data "aws_ami" "ubuntu" {
  most_recent = true
  owners      = ["099720109477"] # Canonical

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"]
  }
}

resource "aws_security_group" "{{snakeCase name}}_sg" {
  name        = "{{kebabCase name}}-security-group"
  description = "Security group for {{pascalCase name}} EC2 instance"

  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "{{pascalCase name}} Security Group"
  }
}

resource "aws_instance" "{{snakeCase name}}" {
  ami                    = data.aws_ami.ubuntu.id
  instance_type          = "t3.micro"
  vpc_security_group_ids = [aws_security_group.{{snakeCase name}}_sg.id]

  tags = {
    Name        = "{{pascalCase name}}"
    Environment = "dev"
  }

  user_data = <<-EOF
              #!/bin/bash
              apt-get update
              apt-get install -y nginx
              systemctl start nginx
              systemctl enable nginx
              echo "<h1>Hello from {{pascalCase name}} EC2!</h1>" > /var/www/html/index.html
              EOF
}

output "instance_id" {
  value = aws_instance.{{snakeCase name}}.id
}

output "public_ip" {
  value = aws_instance.{{snakeCase name}}.public_ip
}

output "public_dns" {
  value = aws_instance.{{snakeCase name}}.public_dns
}